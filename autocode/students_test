package coverage
// package main

import (
	"os"
	"testing"
	"fmt"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW
func TestSwapOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "santhosh", lastName:"kumar"})
	People1 = append(People1, Person {firstName : "santhosh1", lastName:"kumar1"})
	People1.Swap(0, 1)
	// r, error := People1.Len()
	//People1.Len()
	// if (error != nil) {
	// 	t.Errorf("swap failed")
	// }
}

func TestLessOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "santhosh", lastName:"kumar"})
	People1 = append(People1, Person {firstName : "santhosh1", lastName:"kumar1"})
	People1.Swap(0, 1)
	// r, error := People1.Len()
	//People1.Len()
	// if (error != nil) {
	// 	t.Errorf("swap failed")
	// }
}

func TestLenOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "santhosh", lastName:"kumar"})
	People1 = append(People1, Person {firstName : "santhosh1", lastName:"kumar1"})
	People1.Len()
	// r, error := People1.Len()
	//People1.Len()
	// if (error != nil) {
	// 	t.Errorf("swap failed")
	// }
}

func TestMatrixNew(t *testing.T) {
	myMatrix, err := New("1 2 3 \n 4 5 6 \n 7 8 9")
	if err != nil {
		t.Errorf("Matrix creation Failed")
	}
	fmt.Println(myMatrix)
}


func TestMatrixNew2(t *testing.T) {
	myMatrix, err := New("1 2 3 \n 4 5 ")
	if err != nil {
		t.Errorf("Matrix creation Failed")
	}
	fmt.Println(myMatrix)
}