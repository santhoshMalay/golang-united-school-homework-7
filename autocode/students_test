package coverage
// package main

import (
	"os"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW
func TestSwapOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "santhosh", lastName:"kumar"})
	People1 = append(People1, Person {firstName : "santhosh1", lastName:"kumar1"})
	
	beforeSwap := People1[0].firstName
	People1.Swap(0, 1)

	if People1[1].firstName != beforeSwap {
		t.Errorf("Swap not working as expected expected %s, got %s", beforeSwap, People1[1].firstName)
	}
}

func TestLessFirstNameOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "EPAM", lastName:"India"})
	People1 = append(People1, Person {firstName : "Santhosh1", lastName:"kumar1"})
	res := People1.Less(0, 1)

	if(res != true) {
		t.Errorf("Expected: %v, got %v", true , false)
	}
}

func TestLessSecondNameOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "EPAM", lastName:"India"})
	People1 = append(People1, Person {firstName : "EPAM", lastName:"UKR"})
	res := People1.Less(0, 1)

	if(res != true) {
		t.Errorf("Expected: %v, got %v", true , false)
	}
}

func TestLessDayOK(t *testing.T) {
	var People1 People
	People1 = append(People1, Person {firstName : "EPAM", lastName:"India", birthDay: time.Date(2015, time.January, 11, 00, 0, 0, 0, time.UTC) })
	People1 = append(People1, Person {firstName : "EPAM", lastName:"India", birthDay: time.Date(2005, time.January, 11, 00, 0, 0, 0, time.UTC)})  
	res := People1.Less(0, 1)

	if(res != true) {
		t.Errorf("Expected: %v, got %v", true , false)
	}
}

func TestLenOK(t *testing.T) {
	var People1 People
	var expectedlen int = 2
	People1 = append(People1, Person {firstName : "santhosh", lastName:"kumar"})
	People1 = append(People1, Person {firstName : "santhosh1", lastName:"kumar1"})
	retLen := People1.Len()

	if(retLen != expectedlen) {
		t.Errorf("Expected: %d, got %d", expectedlen, retLen)
	}
}


func TestMatrixNew(t *testing.T) {
	var myMatrix *Matrix
	myMatrix, err := New("1 2 3 \n 4 5 6 \n 7 8 9")
	if err != nil {
		t.Errorf("No error Expected, but got '%s'", err.Error())
	} else {
		result := myMatrix.Set(4,4, 10)
		if (result != false) {
			t.Errorf("Expected: %v, got %v", false , true)
		}

		result2 := myMatrix.Set(2,2, 10)
		if (result2 != true) {
			t.Errorf("Expected: %v, got %v", true, false)
		}

		matrixColumns := myMatrix.Cols()
		if (len(matrixColumns) == 0) {
			t.Errorf("Expected non zero, got zero colums")
		}

		matrixRows := myMatrix.Rows()
		if (len(matrixRows) == 0) {
			t.Errorf("Expected non zero, got zero colums")
		}
	}
}


func TestMatrixRows(t *testing.T) {
	_ , err := New("1 2 3 \n 4 5 ")
	expectedError := "Rows need to be the same length"
	if err.Error() != expectedError {
		t.Errorf("Expect error to be '%s', but got '%s'", expectedError, err.Error())
	}
}